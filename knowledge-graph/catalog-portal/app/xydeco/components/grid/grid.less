// Project Horizon
// (c) 2013-2014 VMware, Inc. All rights reserved.
// VMware Confidential.


@import "../base/mixins";

/** @pattern .grid

A layout system which strives to align the edges of elements
vertically by constraining their horizontal dimensions to
integer multiples of a fixed dimension (called a modulus).

By default, child elements of a grid are laid out as rows.  Columns are
created using the `box` class.  Boxes within a grid are laid out left-to-right (by default).
If there are more boxes than will fit in the width of
the grid (or other container), they drop below the
previous boxes. How exactly this lays out is determined
by the CSS `float` mechanics.

The overall width of the grid can be set by specifying the number of
columns with a modifier on the `grid` class; by default, it fills its parent container.
Boxes are floated within the grid; if a box will not fit on the same row
as the preceding box(es), it will drop below.

@example[basic-grid.html] Basic grid

### Nested Grids

A `box` may contain a `grid`, creating a nested grid.  By default, the grid will
be as wide as the `box`.

The `grid` element is optional in this case; you can put `grid-row`s directly
in a `box`.

@example[nested-grid.html] Nested Grids

**/

// Default grid dimensions:

@grid-columns: 16;
@grid-modulus: 60px;
@grid-gutter: 20px;

@grid-width-classes:
    one-, two-, three-, four-,
    five-, six-, seven-, eight-,
    nine-, ten-, eleven-, twelve-,
    thirteen-, fourteen-, fifteen-, sixteen-,
    seventeen-, eighteen-, nineteen-, twenty-,
    twenty-one-, twenty-two-;

@grid-M-width-classes:
    M-one-, M-two-, M-three-, M-four-,
    M-five-, M-six-, M-seven-, M-eight-,
    M-nine-, M-ten-, M-eleven-, M-twelve-,
    M-thirteen-, M-fourteen-, M-fifteen-, M-sixteen-;

@grid-S-width-classes:
    S-one-, S-two-, S-three-, S-four-,
    S-five-, S-six-, S-seven-, S-eight-,
    S-nine-, S-ten-, S-eleven-, S-twelve-;

@grid-LP-width-classes:
    LP-one-, LP-two-, LP-three-, LP-four-,
    LP-five-, LP-six-, LP-seven-, LP-eight-, LP-nine-;

@grid-MP-width-classes:
    MP-one-, MP-two-, MP-three-, MP-four-,
    MP-five-, MP-six-;

@grid-SP-width-classes:
    SP-one-, SP-two-, SP-three-, SP-four-,
    SP-five-, SP-six-;

.grid-base {
    .clearfix;
    float: none;
    margin: -@grid-gutter/2;

    > * {
        padding: @grid-gutter/2;
        float: left;
    }
    > .grid-base {
        float: none;
    }
}

.grid:extend( .grid-base all ) {
    // Modifiers
    &.middle-aligned- {
        /**
        A grid in which boxes are aligned vertically at the middle of each box.
        **/
        .align( middle );
    }

    &.base- { /**
        The top-level grid, not nested.  Only required if mixing grid layouts
        with other elements not in a grid, to keep the grid from encroaching
        on the previous/next elements. */
        margin-top: 0;
        margin-bottom:0;
    }

    &.page- { /**
        A grid which is sized responsively to match the page size.*/
        margin-left: auto;
        margin-right: auto;
        padding: 0;
    }

    // Members

    > .grid-br { /**

        Break a row of the grid, forcing a new layout row.
        The element should be empty, so it's
        convenient to use the self-closing `<br>` tag.

        @example[grid-br.html] Using breaks to control layout

        **/

        clear: both;
        float: none;
        height: 0;
    }

    > .grid-rule,
    > .grid-hr { /**

        A horizontal rule which spans the width of the grid.  Like `grid-br`, it
        forces a new row of boxes, and should be empty.  The rule is drawn from the
        inside edge of each gutter so that the endpoints align with any text in the boxes.

        @example[grid-rule.html] Adding a rule between rows of the grid.

        **/

        clear: both;
        margin: 0 (@grid-gutter/2);
        height: 0;
        border-bottom: 1px solid fade( #fff, 50% );
        border-top: 1px solid fade( #000, 20% );
        padding-top: 0;
        padding-bottom: 0;
        float: none;
    }

    // Mixins

    // Generic setter function for setting any property to a
    // multiple of modulus +/- an offset
    .set ( @prop, @n, @offset: 0 ) {
        @{prop} : (@n * @grid-modulus + @offset);
    }

    // Set the width of a grid from its integral dimension
    .width ( @n, @offset: 0 ) when (isnumber(@n)) and not (ispercentage(@n)) {
        .grid > .set( width, @n, @offset );
    }

    .width ( auto ) {
        width: auto;
    }

    .width( full ) {
        .width( 100% );
    }

    .width( @pct ) when (ispercentage(@pct)) {
        width: @pct;
        box-sizing: border-box;
    }

    .width( remainder ) {
        float: none;
        width: auto;
        overflow: hidden;
    }

    // Set the min-width of an element from its integral dimension
    .min-width ( @n, @offset: 0 ) {
        .grid > .set( min-width, @n, @offset );
    }

    // Set the height of an element from its integral dimension
    .height ( @n ) {
        .grid > .set( height, @n, -@grid-gutter );
    }

    // Define width prefixes for grids and boxes
    .define-widths ( @classes: @grid-width-classes ) {
        .define-widths( @classes, length(@classes) );
    }

    .define-widths ( @classes, @n ) when ( @n > 0 ) {
        @class: extract(@classes, @n);
        .define-widths( @classes, @n - 1 );
        &.@{class} {
            .width( @n );
        }
    }

    // Set a property, and add on the offset for children of another grid.
    .accumulate ( @prop, @n, @offset: @grid-gutter/2 ) when (isnumber(@offset)) {
        .set( @prop, @n );
        .grid > & {
            .set( @prop, @n, @offset );
        }
    }

    .accumulate ( @prop, @n, @parentGrid, @offset: @grid-gutter/2 ) when not (isnumber(@parentGrid)) {
        .set( @prop, @n );
        .grid > &,
        .@{parentGrid} > & {
            .set( @prop, @n, @offset );
        }
    }

    // Leave space in grid (left, right, or both sides) e.g. to make room for a sidebar
    .leave( @n ) when (isnumber(@n)) {
        .leave( right, @n );
        .leave( left, @n );
    }

    .leave( @n, @parentGrid ) when (isnumber(@n)) {
        .leave( right, @n, @parentGrid );
        .leave( left, @n, @parentGrid );
    }

    .leave( left, @n ) {
        .accumulate( padding-left, @n );
    }

    .leave( left, @n, @parentGrid ) {
        .accumulate( padding-left, @n, @parentGrid );
    }

    .leave( right, @n ) {
        .accumulate( padding-right, @n );
    }

    .leave( right, @n, @parentGrid ) {
        .accumulate( padding-right, @n, @parentGrid );
    }

    // Set the left/right margins of the grid
    .row-margins ( @n: 0 ) {
        .leave( @n );
    }

    // Set the vertical gutter size
    .column-spacing( @x: 20px ) {
        margin-left: -@x/2;
        margin-right: -@x/2;
        > * {
            padding-left: @x/2;
            padding-right: @x/2;
        }
    }

    // Set the horizontal gutter size
    .row-spacing( @y: 20px ) {
        margin-top: -@y/2;
        margin-bottom: -@y/2;
        > * {
            padding-top: @y/2;
            padding-bottom: @y/2;
        }
        &:after {
            height: @y/2;
        }
    }

    // Vertically align the boxes about their middle
    .align( middle ) {
        .translateY(50%);
        > * {
            .translateY(-50%);
        }
    }

    // Derived class interface

    .extend() {
        &:extend( .grid-base all );
    }
}
